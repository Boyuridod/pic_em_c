CCS PCM C Compiler, Version 5.076, 56587               05-jun-24 14:21

               Filename:   D:\projetos_pic\pic_em_c\programa1-2\programa1.lst

               ROM used:   265 words (3%)
                           Largest free fragment is 2048
               RAM used:   30 (8%) at main() level
                           31 (8%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0B8
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... #include <programa1.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOPROTECT                //Code not protected from reading 
....................  
.................... #use delay(crystal=8MHz) 
.................... #define BTN_INICIAR   PIN_B0 
.................... #define BTN_PARAR   PIN_B1 
.................... #define BTN_ZERAR   PIN_B2 
.................... #define DISPLAY1   PIN_B4 
.................... #define DISPLAY2   PIN_B5 
.................... #define DISPLAY3   PIN_B6 
.................... #define DISPLAY4   PIN_B7 
.................... #define PONTO  PIN_D7 
....................  
....................  
.................... int1 ligado = 0; 
.................... int8 qual_display = -1, tempo = 0; 
.................... int8 centena = 0, dezena = 0, unidade = 0, decimal = 0; 
.................... int8 conversao[10] = {63, 6, 91, 79, 102, 109, 125, 7, 127, 111}; 
*
00CB:  MOVLW  3F
00CC:  BCF    03.5
00CD:  MOVWF  2E
00CE:  MOVLW  06
00CF:  MOVWF  2F
00D0:  MOVLW  5B
00D1:  MOVWF  30
00D2:  MOVLW  4F
00D3:  MOVWF  31
00D4:  MOVLW  66
00D5:  MOVWF  32
00D6:  MOVLW  6D
00D7:  MOVWF  33
00D8:  MOVLW  7D
00D9:  MOVWF  34
00DA:  MOVLW  07
00DB:  MOVWF  35
00DC:  MOVLW  7F
00DD:  MOVWF  36
00DE:  MOVLW  6F
00DF:  MOVWF  37
....................  
.................... #INT_TIMER0 
.................... void  TIMER0_isr(VOID) { 
....................  
....................    tempo++; 
*
002F:  INCF   29,F
....................  
....................    if(tempo == 100 && ligado == 1){ 
0030:  MOVF   29,W
0031:  SUBLW  64
0032:  BTFSS  03.2
0033:  GOTO   053
0034:  BTFSS  27.0
0035:  GOTO   053
....................  
....................       decimal++; 
0036:  INCF   2D,F
....................  
....................       if(decimal == 10){ 
0037:  MOVF   2D,W
0038:  SUBLW  0A
0039:  BTFSS  03.2
003A:  GOTO   03D
....................  
....................          decimal = 0; 
003B:  CLRF   2D
....................          unidade++; 
003C:  INCF   2C,F
....................  
....................       } 
....................  
....................       if(unidade == 10){ 
003D:  MOVF   2C,W
003E:  SUBLW  0A
003F:  BTFSS  03.2
0040:  GOTO   043
....................  
....................          unidade = 0; 
0041:  CLRF   2C
....................          dezena++; 
0042:  INCF   2B,F
....................  
....................       } 
....................  
....................       if(dezena == 10){ 
0043:  MOVF   2B,W
0044:  SUBLW  0A
0045:  BTFSS  03.2
0046:  GOTO   049
....................  
....................          dezena = 0; 
0047:  CLRF   2B
....................          centena++; 
0048:  INCF   2A,F
....................  
....................       } 
....................  
....................       if(centena == 10){ 
0049:  MOVF   2A,W
004A:  SUBLW  0A
004B:  BTFSS  03.2
004C:  GOTO   052
....................  
....................          decimal = unidade = dezena = centena = 0; 
004D:  CLRF   2A
004E:  MOVF   2A,W
004F:  MOVWF  2B
0050:  MOVWF  2C
0051:  MOVWF  2D
....................  
....................       } 
....................        
....................       tempo = 0; 
0052:  CLRF   29
....................  
....................    } 
....................  
....................    qual_display++; 
0053:  INCFSZ 28,F
....................  
....................    if(qual_display == 0){ 
0054:  GOTO   069
....................  
....................       output_low(DISPLAY4); 
0055:  BSF    03.5
0056:  BCF    06.7
0057:  BCF    03.5
0058:  BCF    06.7
....................       output_high(DISPLAY1);       
0059:  BSF    03.5
005A:  BCF    06.4
005B:  BCF    03.5
005C:  BSF    06.4
....................       output_d(conversao[decimal]); 
005D:  MOVLW  2E
005E:  ADDWF  2D,W
005F:  MOVWF  04
0060:  BCF    03.7
0061:  MOVF   00,W
0062:  MOVWF  39
0063:  BSF    03.5
0064:  CLRF   08
0065:  BCF    03.5
0066:  MOVF   39,W
0067:  MOVWF  08
....................  
....................    } 
0068:  GOTO   0B4
....................  
....................    else if(qual_display == 1){ 
0069:  DECFSZ 28,W
006A:  GOTO   083
....................  
....................       output_low(DISPLAY1); 
006B:  BSF    03.5
006C:  BCF    06.4
006D:  BCF    03.5
006E:  BCF    06.4
....................       output_high(DISPLAY2);    
006F:  BSF    03.5
0070:  BCF    06.5
0071:  BCF    03.5
0072:  BSF    06.5
....................       output_d(conversao[unidade]); 
0073:  MOVLW  2E
0074:  ADDWF  2C,W
0075:  MOVWF  04
0076:  BCF    03.7
0077:  MOVF   00,W
0078:  MOVWF  39
0079:  BSF    03.5
007A:  CLRF   08
007B:  BCF    03.5
007C:  MOVF   39,W
007D:  MOVWF  08
....................       output_high(PONTO); 
007E:  BSF    03.5
007F:  BCF    08.7
0080:  BCF    03.5
0081:  BSF    08.7
....................  
....................    } 
0082:  GOTO   0B4
....................  
....................    else if(qual_display == 2){ 
0083:  MOVF   28,W
0084:  SUBLW  02
0085:  BTFSS  03.2
0086:  GOTO   09B
....................    
....................       output_low(DISPLAY2); 
0087:  BSF    03.5
0088:  BCF    06.5
0089:  BCF    03.5
008A:  BCF    06.5
....................       output_high(DISPLAY3);       
008B:  BSF    03.5
008C:  BCF    06.6
008D:  BCF    03.5
008E:  BSF    06.6
....................       output_d(conversao[dezena]); 
008F:  MOVLW  2E
0090:  ADDWF  2B,W
0091:  MOVWF  04
0092:  BCF    03.7
0093:  MOVF   00,W
0094:  MOVWF  39
0095:  BSF    03.5
0096:  CLRF   08
0097:  BCF    03.5
0098:  MOVF   39,W
0099:  MOVWF  08
....................  
....................    } 
009A:  GOTO   0B4
....................  
....................    else if(qual_display == 3){ 
009B:  MOVF   28,W
009C:  SUBLW  03
009D:  BTFSS  03.2
009E:  GOTO   0B4
....................   
....................       output_low(DISPLAY3); 
009F:  BSF    03.5
00A0:  BCF    06.6
00A1:  BCF    03.5
00A2:  BCF    06.6
....................       output_high(DISPLAY4);       
00A3:  BSF    03.5
00A4:  BCF    06.7
00A5:  BCF    03.5
00A6:  BSF    06.7
....................       output_d(conversao[centena]); 
00A7:  MOVLW  2E
00A8:  ADDWF  2A,W
00A9:  MOVWF  04
00AA:  BCF    03.7
00AB:  MOVF   00,W
00AC:  MOVWF  39
00AD:  BSF    03.5
00AE:  CLRF   08
00AF:  BCF    03.5
00B0:  MOVF   39,W
00B1:  MOVWF  08
....................  
....................       qual_display = -1; 
00B2:  MOVLW  FF
00B3:  MOVWF  28
....................  
....................    } 
....................  
00B4:  BCF    0B.2
00B5:  BCF    0A.3
00B6:  BCF    0A.4
00B7:  GOTO   01B
.................... } 
....................  
.................... void main(){ 
00B8:  MOVF   03,W
00B9:  ANDLW  1F
00BA:  MOVWF  03
00BB:  BCF    27.0
00BC:  MOVLW  FF
00BD:  MOVWF  28
00BE:  CLRF   29
00BF:  CLRF   2A
00C0:  CLRF   2B
00C1:  CLRF   2C
00C2:  CLRF   2D
00C3:  BSF    03.5
00C4:  BSF    1F.0
00C5:  BSF    1F.1
00C6:  BSF    1F.2
00C7:  BCF    1F.3
00C8:  MOVLW  07
00C9:  MOVWF  1C
00CA:  BCF    03.7
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_8|RTCC_8_BIT); //1, 0 ms overflow 
*
00E0:  BSF    03.5
00E1:  MOVF   01,W
00E2:  ANDLW  C0
00E3:  IORLW  02
00E4:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); 
00E5:  BCF    03.5
00E6:  BSF    0B.5
....................    enable_interrupts(GLOBAL); 
00E7:  MOVLW  C0
00E8:  IORWF  0B,F
....................    WHILE(TRUE){ 
....................         
....................       if(!input(BTN_INICIAR)){ 
00E9:  BSF    03.5
00EA:  BSF    06.0
00EB:  BCF    03.5
00EC:  BTFSC  06.0
00ED:  GOTO   0F0
....................        
....................          ligado = 1; 
00EE:  BSF    27.0
....................           
....................       } 
00EF:  GOTO   107
....................        
....................       else if(!input(BTN_PARAR)){ 
00F0:  BSF    03.5
00F1:  BSF    06.1
00F2:  BCF    03.5
00F3:  BTFSC  06.1
00F4:  GOTO   0FA
....................        
....................          ligado = tempo = 0; 
00F5:  CLRF   29
00F6:  BCF    27.0
00F7:  BTFSC  29.0
00F8:  BSF    27.0
....................        
....................       } 
00F9:  GOTO   107
....................        
....................       else if(!input(BTN_ZERAR)){ 
00FA:  BSF    03.5
00FB:  BSF    06.2
00FC:  BCF    03.5
00FD:  BTFSC  06.2
00FE:  GOTO   107
....................        
....................          if(ligado == 0){ 
00FF:  BTFSC  27.0
0100:  GOTO   107
....................        
....................             decimal = unidade = dezena = centena = 0; 
0101:  CLRF   2A
0102:  MOVF   2A,W
0103:  MOVWF  2B
0104:  MOVWF  2C
0105:  MOVWF  2D
....................             tempo = 0; 
0106:  CLRF   29
....................           
....................          } 
....................        
....................       } 
0107:  GOTO   0E9
....................    } 
.................... } 
0108:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
