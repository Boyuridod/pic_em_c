CCS PCM C Compiler, Version 5.076, 56587               06-jun-24 17:35

               Filename:   D:\projetos_pic\pic_em_c\programa3\controle_temperatura.lst

               ROM used:   828 words (10%)
                           Largest free fragment is 2048
               RAM used:   27 (7%) at main() level
                           39 (11%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1EB
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   04F
.................... #include <controle_temperatura.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
005A:  DATA D3,24
005B:  DATA 4F,23
005C:  DATA 00,00
005D:  DATA 48,2A
005E:  DATA 4F,23
005F:  DATA 00,01
0060:  DATA 43,26
0061:  DATA 4F,23
0062:  DATA 00,01
0063:  DATA D3,24
0064:  DATA 4F,27
0065:  DATA 00,01
0066:  DATA 48,2A
0067:  DATA 4F,27
0068:  DATA 00,01
0069:  DATA 43,26
006A:  DATA 4F,23
006B:  DATA 00,01
006C:  DATA 48,2A
006D:  DATA 4F,23
006E:  DATA 00,01
006F:  DATA 43,26
0070:  DATA 4F,27
0071:  DATA 00,01
0072:  DATA D3,24
0073:  DATA 4F,23
0074:  DATA 00,01
0075:  DATA 48,2A
0076:  DATA 4F,23
0077:  DATA 00,01
0078:  DATA 43,26
0079:  DATA 4F,23
007A:  DATA 00,00
*
0132:  CLRF   3E
0133:  MOVF   04,W
0134:  MOVWF  3D
0135:  BCF    3E.0
0136:  BTFSC  03.7
0137:  BSF    3E.0
0138:  SWAPF  37,W
0139:  IORLW  F0
013A:  MOVWF  39
013B:  ADDWF  39,F
013C:  ADDLW  E2
013D:  MOVWF  3A
013E:  ADDLW  32
013F:  MOVWF  3C
0140:  MOVF   37,W
0141:  ANDLW  0F
0142:  ADDWF  3A,F
0143:  ADDWF  3A,F
0144:  ADDWF  3C,F
0145:  ADDLW  E9
0146:  MOVWF  3B
0147:  ADDWF  3B,F
0148:  ADDWF  3B,F
0149:  SWAPF  36,W
014A:  ANDLW  0F
014B:  ADDWF  3B,F
014C:  ADDWF  3C,F
014D:  RLF    3B,F
014E:  RLF    3C,F
014F:  COMF   3C,F
0150:  RLF    3C,F
0151:  MOVF   36,W
0152:  ANDLW  0F
0153:  ADDWF  3C,F
0154:  RLF    39,F
0155:  MOVLW  07
0156:  MOVWF  38
0157:  MOVLW  0A
0158:  ADDWF  3C,F
0159:  DECF   3B,F
015A:  BTFSS  03.0
015B:  GOTO   158
015C:  ADDWF  3B,F
015D:  DECF   3A,F
015E:  BTFSS  03.0
015F:  GOTO   15C
0160:  ADDWF  3A,F
0161:  DECF   39,F
0162:  BTFSS  03.0
0163:  GOTO   160
0164:  ADDWF  39,F
0165:  DECF   38,F
0166:  BTFSS  03.0
0167:  GOTO   164
0168:  MOVLW  38
0169:  MOVWF  04
016A:  BCF    03.7
016B:  MOVLW  07
016C:  ANDWF  3D,W
016D:  BCF    3D.6
016E:  ADDWF  04,F
016F:  MOVLW  3C
0170:  SUBWF  04,W
0171:  BTFSC  03.2
0172:  BSF    3D.6
0173:  MOVF   00,W
0174:  MOVWF  77
0175:  BTFSS  03.2
0176:  GOTO   17F
0177:  BTFSC  3D.6
0178:  GOTO   17F
0179:  BTFSC  3D.4
017A:  GOTO   191
017B:  BTFSC  3D.3
017C:  GOTO   17F
017D:  MOVLW  20
017E:  GOTO   182
017F:  BSF    3D.3
0180:  BCF    3D.4
0181:  MOVLW  30
0182:  ADDWF  77,F
0183:  CLRF   37
0184:  MOVF   04,W
0185:  MOVWF  36
0186:  BCF    37.0
0187:  BTFSC  03.7
0188:  BSF    37.0
0189:  MOVF   77,W
018A:  MOVWF  3F
018B:  CALL   112
018C:  MOVF   36,W
018D:  MOVWF  04
018E:  BCF    03.7
018F:  BTFSC  37.0
0190:  BSF    03.7
0191:  INCF   04,F
0192:  BTFSS  3D.6
0193:  GOTO   16F
0194:  RETURN
0195:  MOVF   0B,W
0196:  MOVWF  36
0197:  BCF    0B.7
0198:  BSF    03.5
0199:  BSF    03.6
019A:  BSF    0C.7
019B:  BSF    0C.0
019C:  NOP
019D:  NOP
019E:  BCF    03.5
019F:  BCF    03.6
01A0:  BTFSC  36.7
01A1:  BSF    0B.7
01A2:  BSF    03.6
01A3:  MOVF   0C,W
01A4:  ANDLW  7F
01A5:  BTFSC  03.2
01A6:  GOTO   1E9
01A7:  BCF    03.6
01A8:  MOVWF  36
01A9:  BSF    03.6
01AA:  MOVF   0D,W
01AB:  BCF    03.6
01AC:  MOVWF  37
01AD:  BSF    03.6
01AE:  MOVF   0F,W
01AF:  BCF    03.6
01B0:  MOVWF  38
01B1:  MOVF   36,W
01B2:  MOVWF  3F
01B3:  CALL   112
01B4:  MOVF   37,W
01B5:  BSF    03.6
01B6:  MOVWF  0D
01B7:  BCF    03.6
01B8:  MOVF   38,W
01B9:  BSF    03.6
01BA:  MOVWF  0F
01BB:  BCF    03.6
01BC:  MOVF   0B,W
01BD:  MOVWF  39
01BE:  BCF    0B.7
01BF:  BSF    03.5
01C0:  BSF    03.6
01C1:  BSF    0C.7
01C2:  BSF    0C.0
01C3:  NOP
01C4:  NOP
01C5:  BCF    03.5
01C6:  BCF    03.6
01C7:  BTFSC  39.7
01C8:  BSF    0B.7
01C9:  BSF    03.6
01CA:  RLF    0C,W
01CB:  RLF    0E,W
01CC:  ANDLW  7F
01CD:  BTFSC  03.2
01CE:  GOTO   1E9
01CF:  BCF    03.6
01D0:  MOVWF  36
01D1:  BSF    03.6
01D2:  MOVF   0D,W
01D3:  BCF    03.6
01D4:  MOVWF  37
01D5:  BSF    03.6
01D6:  MOVF   0F,W
01D7:  BCF    03.6
01D8:  MOVWF  38
01D9:  MOVF   36,W
01DA:  MOVWF  3F
01DB:  CALL   112
01DC:  MOVF   37,W
01DD:  BSF    03.6
01DE:  MOVWF  0D
01DF:  BCF    03.6
01E0:  MOVF   38,W
01E1:  BSF    03.6
01E2:  MOVWF  0F
01E3:  INCF   0D,F
01E4:  BTFSC  03.2
01E5:  INCF   0F,F
01E6:  BCF    03.6
01E7:  GOTO   195
01E8:  BSF    03.6
01E9:  BCF    03.6
01EA:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOPROTECT                //Code not protected from reading 
....................  
.................... #use delay(crystal=8MHz) 
*
00CF:  MOVLW  36
00D0:  MOVWF  04
00D1:  BCF    03.7
00D2:  MOVF   00,W
00D3:  BTFSC  03.2
00D4:  GOTO   0E2
00D5:  MOVLW  02
00D6:  MOVWF  78
00D7:  CLRF   77
00D8:  DECFSZ 77,F
00D9:  GOTO   0D8
00DA:  DECFSZ 78,F
00DB:  GOTO   0D7
00DC:  MOVLW  97
00DD:  MOVWF  77
00DE:  DECFSZ 77,F
00DF:  GOTO   0DE
00E0:  DECFSZ 00,F
00E1:  GOTO   0D5
00E2:  RETURN
.................... #define COOLER   PIN_C1 
.................... #define HEATER   PIN_C2 
.................... #define S1   PIN_B0 
.................... #define S2   PIN_B1 
....................  
....................  
....................  
.................... #include <lcd_8bits.c> 
.................... /*========================================= 
.................... 8-BIT LCD DRIVER FOR PIC16F877A CCSC 
.................... ==========================================*/ 
.................... /////////////////////////////////////////////////////////////////// 
.................... // CCS C Compiler 
.................... // LCD 16x2 
.................... // 
.................... // by Nisar Ahmed 
.................... // 2009/03/27 
.................... ////////////////////////////////////////////////////////////////// 
.................... //#include <16F877.h>                           // PIC16F877 header file 
.................... //#use delay(clock=4000000)                       // for 4Mhz crystal 
.................... //#fuses XT, NOWDT, NOPROTECT, NOLVP              // for debug mode 
....................  
.................... #define PORT_A                  0               // define for function output() 
.................... #define PORT_B                  1 
.................... #define PORT_C                  2 
.................... #define PORT_D                  3 
.................... #define PORT_E                  4 
....................  
.................... #define NCHAR_PER_LINE          16              // max char numbers per line 
.................... #define LCD_RS                  PIN_E0 
.................... #define LCD_RW                  PIN_E2 
.................... #define LCD_E                   PIN_E1 
.................... #define LCD_DAT                 PORT_D 
.................... //===========================================================================// 
.................... //--- output() -----------------///////////////////////////////////////////////  
.................... //lcd data bus output 
.................... void output(int8 port, int8 dat) 
.................... { 
....................         switch(port) 
*
007B:  MOVF   40,W
007C:  XORLW  00
007D:  BTFSC  03.2
007E:  GOTO   08C
007F:  XORLW  01
0080:  BTFSC  03.2
0081:  GOTO   092
0082:  XORLW  03
0083:  BTFSC  03.2
0084:  GOTO   098
0085:  XORLW  01
0086:  BTFSC  03.2
0087:  GOTO   0A0
0088:  XORLW  07
0089:  BTFSC  03.2
008A:  GOTO   0A6
008B:  GOTO   0AE
....................                 { 
....................                 case PORT_A: output_a(dat);      break; 
008C:  BSF    03.5
008D:  CLRF   05
008E:  BCF    03.5
008F:  MOVF   41,W
0090:  MOVWF  05
0091:  GOTO   0AE
....................                 case PORT_B: output_b(dat);      break; 
0092:  BSF    03.5
0093:  CLRF   06
0094:  BCF    03.5
0095:  MOVF   41,W
0096:  MOVWF  06
0097:  GOTO   0AE
....................                 case PORT_C: output_c(dat);      break; 
0098:  MOVLW  00
0099:  MOVWF  2B
009A:  BSF    03.5
009B:  CLRF   07
009C:  BCF    03.5
009D:  MOVF   41,W
009E:  MOVWF  07
009F:  GOTO   0AE
....................                 case PORT_D: output_d(dat);      break; 
00A0:  BSF    03.5
00A1:  CLRF   08
00A2:  BCF    03.5
00A3:  MOVF   41,W
00A4:  MOVWF  08
00A5:  GOTO   0AE
....................                 case PORT_E: output_e(dat);      break; 
00A6:  BSF    03.5
00A7:  BCF    09.0
00A8:  BCF    09.1
00A9:  BCF    09.2
00AA:  BCF    03.5
00AB:  MOVF   41,W
00AC:  MOVWF  09
00AD:  GOTO   0AE
....................                 default :       //??? port maybe error! 
....................                         break; 
....................                 } 
00AE:  RETURN
.................... }//end output() 
.................... //===========================================================================// 
.................... //--- lcd_write_cmd() -----------//////////////////////////////////////////////  
.................... void lcd_write_cmd(int8 cmd) 
.................... { 
....................    delay_us(40); 
00AF:  MOVLW  1A
00B0:  MOVWF  77
00B1:  DECFSZ 77,F
00B2:  GOTO   0B1
00B3:  NOP
....................    output_low(LCD_RS); 
00B4:  BSF    03.5
00B5:  BCF    09.0
00B6:  BCF    03.5
00B7:  BCF    09.0
....................    output_low(LCD_RW); 
00B8:  BSF    03.5
00B9:  BCF    09.2
00BA:  BCF    03.5
00BB:  BCF    09.2
....................    output(LCD_DAT, cmd); 
00BC:  MOVLW  03
00BD:  MOVWF  40
00BE:  MOVF   3A,W
00BF:  MOVWF  41
00C0:  CALL   07B
....................     
....................    output_high(LCD_E); 
00C1:  BSF    03.5
00C2:  BCF    09.1
00C3:  BCF    03.5
00C4:  BSF    09.1
....................    delay_us(40); 
00C5:  MOVLW  1A
00C6:  MOVWF  77
00C7:  DECFSZ 77,F
00C8:  GOTO   0C7
00C9:  NOP
....................    output_low(LCD_E); 
00CA:  BSF    03.5
00CB:  BCF    09.1
00CC:  BCF    03.5
00CD:  BCF    09.1
00CE:  RETURN
.................... }//end lcd_write_cmd() 
.................... //===========================================================================// 
.................... //--- lcd_write_dat() ------------/////////////////////////////////////////////  
.................... void lcd_write_dat(int8 dat) 
.................... { 
....................    delay_us(40); 
*
0112:  MOVLW  1A
0113:  MOVWF  77
0114:  DECFSZ 77,F
0115:  GOTO   114
0116:  NOP
....................    output_high(LCD_RS); 
0117:  BSF    03.5
0118:  BCF    09.0
0119:  BCF    03.5
011A:  BSF    09.0
....................    output_low(LCD_RW); 
011B:  BSF    03.5
011C:  BCF    09.2
011D:  BCF    03.5
011E:  BCF    09.2
....................    output(LCD_DAT, dat); 
011F:  MOVLW  03
0120:  MOVWF  40
0121:  MOVF   3F,W
0122:  MOVWF  41
0123:  CALL   07B
....................     
....................    output_high(LCD_E); 
0124:  BSF    03.5
0125:  BCF    09.1
0126:  BCF    03.5
0127:  BSF    09.1
....................    delay_us(40); 
0128:  MOVLW  1A
0129:  MOVWF  77
012A:  DECFSZ 77,F
012B:  GOTO   12A
012C:  NOP
....................    output_low(LCD_E); 
012D:  BSF    03.5
012E:  BCF    09.1
012F:  BCF    03.5
0130:  BCF    09.1
0131:  RETURN
.................... }//end lcd_write_dat() 
.................... //===========================================================================// 
.................... //--- lcd_init() ------------//////////////////////////////////////////////////  
.................... void lcd_init(void) 
.................... { 
....................    output_low(LCD_E);              // Let LCD E line low 
*
00E3:  BSF    03.5
00E4:  BCF    09.1
00E5:  BCF    03.5
00E6:  BCF    09.1
....................     
....................    lcd_write_cmd(0x38);            // LCD 16x2, 5x7, 8bits data 
00E7:  MOVLW  38
00E8:  MOVWF  3A
00E9:  CALL   0AF
....................    delay_ms(15); 
00EA:  MOVLW  0F
00EB:  MOVWF  36
00EC:  CALL   0CF
....................    lcd_write_cmd(0x01);            // Clear LCD display 
00ED:  MOVLW  01
00EE:  MOVWF  3A
00EF:  CALL   0AF
....................    delay_ms(10); 
00F0:  MOVLW  0A
00F1:  MOVWF  36
00F2:  CALL   0CF
....................    lcd_write_cmd(0x0C);            // Open display & current 
00F3:  MOVLW  0C
00F4:  MOVWF  3A
00F5:  CALL   0AF
....................    delay_ms(10); 
00F6:  MOVLW  0A
00F7:  MOVWF  36
00F8:  CALL   0CF
....................    lcd_write_cmd(0x06);            // Window fixed 
00F9:  MOVLW  06
00FA:  MOVWF  3A
00FB:  CALL   0AF
....................    delay_ms(10); 
00FC:  MOVLW  0A
00FD:  MOVWF  36
00FE:  CALL   0CF
00FF:  BCF    0A.3
0100:  BCF    0A.4
0101:  GOTO   21C (RETURN)
.................... }//end lcd_init() 
.................... //===========================================================================// 
.................... //--- lcd_display_char() ------------////////////////////////////////////////// 
.................... void lcd_display_char(int8 line, int8 pos, int8 ch) 
.................... { 
....................         int8 tmp; 
....................  
....................         line = (line==0) ? 0 : 1; 
....................         pos  = (pos >NCHAR_PER_LINE) ? NCHAR_PER_LINE : pos; 
....................  
....................         tmp = 0x80 + 0x40*line + pos; 
....................         lcd_write_cmd(tmp); 
....................         lcd_write_dat(ch); 
.................... }//end lcd_display_char() 
.................... //===========================================================================// 
.................... //--- lcd_display_str() ------------///////////////////////////////////////////  
.................... void lcd_display_str(int8 line, char str[]) 
.................... { 
....................      int8 i; 
....................  
....................         for(i=0; i<NCHAR_PER_LINE; i++) 
....................             { 
....................                 lcd_display_char(line, i, ' '); 
....................                 } 
....................         for(i=0; i<NCHAR_PER_LINE; i++) 
....................                 { 
....................                 if(str[i] == '\0') break; 
....................                 lcd_display_char(line, i, str[i]); 
....................                 } 
.................... }//end lcd_display_str() 
.................... //===========================================================================// 
.................... //--- lcd_gotoxy(coluna linha) -----///////////////////////////////////////////  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y != 1) 
0102:  DECFSZ 37,W
0103:  GOTO   105
0104:  GOTO   108
....................       address = 0x40; 
0105:  MOVLW  40
0106:  MOVWF  38
0107:  GOTO   109
....................    else 
....................       address = 0x00; 
0108:  CLRF   38
....................       
....................    address += (x-1);    
0109:  MOVLW  01
010A:  SUBWF  36,W
010B:  ADDWF  38,F
....................    lcd_write_cmd(0x80|address); 
010C:  MOVF   38,W
010D:  IORLW  80
010E:  MOVWF  39
010F:  MOVWF  3A
0110:  CALL   0AF
0111:  RETURN
.................... } 
.................... //===========================================================================// 
....................  
....................  
.................... int1 sistema = 0, fim_250ms = 0; 
.................... int8 tempo_250ms = 0; 
.................... int16 temperatura_desejada = 450, temperatura_atual = 0, histerese = 10; 
....................  
.................... #int_TIMER0 
.................... void  TIMER0_isr(void){ 
....................  
....................    tempo_250ms++; 
*
004F:  INCF   2D,F
....................     
....................    if(tempo_250ms == 250){ 
0050:  MOVF   2D,W
0051:  SUBLW  FA
0052:  BTFSS  03.2
0053:  GOTO   056
....................     
....................       tempo_250ms = 0; 
0054:  CLRF   2D
....................        
....................       fim_250ms = 1; 
0055:  BSF    2C.1
....................     
....................    } 
....................  
0056:  BCF    0B.2
0057:  BCF    0A.3
0058:  BCF    0A.4
0059:  GOTO   02B
.................... } 
....................  
.................... void main(){ 
*
01EB:  MOVF   03,W
01EC:  ANDLW  1F
01ED:  MOVWF  03
01EE:  MOVLW  FF
01EF:  MOVWF  2B
01F0:  BCF    2C.0
01F1:  BCF    2C.1
01F2:  CLRF   2D
01F3:  MOVLW  01
01F4:  MOVWF  2F
01F5:  MOVLW  C2
01F6:  MOVWF  2E
01F7:  CLRF   31
01F8:  CLRF   30
01F9:  CLRF   33
01FA:  MOVLW  0A
01FB:  MOVWF  32
01FC:  CLRF   35
01FD:  CLRF   34
01FE:  BSF    03.5
01FF:  BSF    1F.0
0200:  BSF    1F.1
0201:  BSF    1F.2
0202:  BCF    1F.3
0203:  MOVLW  07
0204:  MOVWF  1C
0205:  BCF    03.7
....................  
....................    setup_adc_ports(AN0_AN1_AN2_AN3_AN4); 
0206:  BCF    1F.0
0207:  BSF    1F.1
0208:  BCF    1F.2
0209:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
020A:  BCF    1F.6
020B:  BCF    03.5
020C:  BSF    1F.6
020D:  BSF    1F.7
020E:  BSF    03.5
020F:  BSF    1F.7
0210:  BCF    03.5
0211:  BSF    1F.0
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_8|RTCC_8_BIT); //1, 0 ms overflow 
0212:  BSF    03.5
0213:  MOVF   01,W
0214:  ANDLW  C0
0215:  IORLW  02
0216:  MOVWF  01
....................    enable_interrupts(int_TIMER0); 
0217:  BCF    03.5
0218:  BSF    0B.5
....................    enable_interrupts(GLOBAL); 
0219:  MOVLW  C0
021A:  IORWF  0B,F
....................     
....................    lcd_init(); 
021B:  GOTO   0E3
....................    lcd_gotoxy(1,1); 
021C:  MOVLW  01
021D:  MOVWF  36
021E:  MOVWF  37
021F:  CALL   102
....................    printf(lcd_write_dat, "Td %04Lu", temperatura_desejada); 
0220:  MOVLW  54
0221:  MOVWF  3F
0222:  CALL   112
0223:  MOVLW  64
0224:  MOVWF  3F
0225:  CALL   112
0226:  MOVLW  20
0227:  MOVWF  3F
0228:  CALL   112
0229:  MOVLW  09
022A:  MOVWF  04
022B:  MOVF   2F,W
022C:  MOVWF  37
022D:  MOVF   2E,W
022E:  MOVWF  36
022F:  CALL   132
....................     
....................    set_adc_channel(0); 
0230:  MOVLW  00
0231:  MOVWF  78
0232:  MOVF   1F,W
0233:  ANDLW  C7
0234:  IORWF  78,W
0235:  MOVWF  1F
....................    delay_us(40); 
0236:  MOVLW  1A
0237:  MOVWF  77
0238:  DECFSZ 77,F
0239:  GOTO   238
023A:  NOP
....................     
....................    lcd_gotoxy(1,2); 
023B:  MOVLW  01
023C:  MOVWF  36
023D:  MOVLW  02
023E:  MOVWF  37
023F:  CALL   102
....................    printf(lcd_write_dat, "SIOF"); 
0240:  MOVLW  5A
0241:  BSF    03.6
0242:  MOVWF  0D
0243:  MOVLW  00
0244:  MOVWF  0F
0245:  BCF    03.6
0246:  CALL   195
....................     
....................    lcd_gotoxy(7,2); 
0247:  MOVLW  07
0248:  MOVWF  36
0249:  MOVLW  02
024A:  MOVWF  37
024B:  CALL   102
....................    printf(lcd_write_dat, "HTOF"); 
024C:  MOVLW  5D
024D:  BSF    03.6
024E:  MOVWF  0D
024F:  MOVLW  00
0250:  MOVWF  0F
0251:  BCF    03.6
0252:  CALL   195
....................     
....................    lcd_gotoxy(13,2); 
0253:  MOVLW  0D
0254:  MOVWF  36
0255:  MOVLW  02
0256:  MOVWF  37
0257:  CALL   102
....................    printf(lcd_write_dat, "CLOF"); 
0258:  MOVLW  60
0259:  BSF    03.6
025A:  MOVWF  0D
025B:  MOVLW  00
025C:  MOVWF  0F
025D:  BCF    03.6
025E:  CALL   195
....................     
....................    while(TRUE){ 
....................     
....................       if(fim_250ms){ 
025F:  BTFSS  2C.1
0260:  GOTO   27F
....................     
....................          temperatura_atual = read_adc(); 
0261:  BSF    1F.2
0262:  BTFSC  1F.2
0263:  GOTO   262
0264:  BSF    03.5
0265:  MOVF   1E,W
0266:  BCF    03.5
0267:  MOVWF  30
0268:  MOVF   1E,W
0269:  MOVWF  31
....................          lcd_gotoxy(10,1); 
026A:  MOVLW  0A
026B:  MOVWF  36
026C:  MOVLW  01
026D:  MOVWF  37
026E:  CALL   102
....................          printf(lcd_write_dat, "Ta %04Lu", temperatura_atual); 
026F:  MOVLW  54
0270:  MOVWF  3F
0271:  CALL   112
0272:  MOVLW  61
0273:  MOVWF  3F
0274:  CALL   112
0275:  MOVLW  20
0276:  MOVWF  3F
0277:  CALL   112
0278:  MOVLW  09
0279:  MOVWF  04
027A:  MOVF   31,W
027B:  MOVWF  37
027C:  MOVF   30,W
027D:  MOVWF  36
027E:  CALL   132
....................       } 
....................     
....................       if(!input(S1)){ 
027F:  BSF    03.5
0280:  BSF    06.0
0281:  BCF    03.5
0282:  BTFSC  06.0
0283:  GOTO   291
....................        
....................          sistema = 1; 
0284:  BSF    2C.0
....................           
....................          lcd_gotoxy(1,2); 
0285:  MOVLW  01
0286:  MOVWF  36
0287:  MOVLW  02
0288:  MOVWF  37
0289:  CALL   102
....................          printf(lcd_write_dat, "SION"); 
028A:  MOVLW  63
028B:  BSF    03.6
028C:  MOVWF  0D
028D:  MOVLW  00
028E:  MOVWF  0F
028F:  BCF    03.6
0290:  CALL   195
....................        
....................       } 
....................        
....................       if(sistema){ 
0291:  BTFSS  2C.0
0292:  GOTO   33A
....................        
....................          if(temperatura_atual < (temperatura_desejada - histerese)){ 
0293:  MOVF   32,W
0294:  SUBWF  2E,W
0295:  MOVWF  77
0296:  MOVF   2F,W
0297:  MOVWF  7A
0298:  MOVF   33,W
0299:  BTFSS  03.0
029A:  INCFSZ 33,W
029B:  SUBWF  7A,F
029C:  MOVF   77,W
029D:  MOVWF  78
029E:  MOVF   31,W
029F:  SUBWF  7A,W
02A0:  BTFSS  03.0
02A1:  GOTO   2CD
02A2:  BTFSS  03.2
02A3:  GOTO   2A8
02A4:  MOVF   78,W
02A5:  SUBWF  30,W
02A6:  BTFSC  03.0
02A7:  GOTO   2CD
....................           
....................             output_high(HEATER); 
02A8:  BCF    2B.2
02A9:  MOVF   2B,W
02AA:  BSF    03.5
02AB:  MOVWF  07
02AC:  BCF    03.5
02AD:  BSF    07.2
....................             output_low(COOLER); 
02AE:  BCF    2B.1
02AF:  MOVF   2B,W
02B0:  BSF    03.5
02B1:  MOVWF  07
02B2:  BCF    03.5
02B3:  BCF    07.1
....................              
....................             lcd_gotoxy(7,2); 
02B4:  MOVLW  07
02B5:  MOVWF  36
02B6:  MOVLW  02
02B7:  MOVWF  37
02B8:  CALL   102
....................             printf(lcd_write_dat, "HTON"); 
02B9:  MOVLW  66
02BA:  BSF    03.6
02BB:  MOVWF  0D
02BC:  MOVLW  00
02BD:  MOVWF  0F
02BE:  BCF    03.6
02BF:  CALL   195
....................              
....................             lcd_gotoxy(13,2); 
02C0:  MOVLW  0D
02C1:  MOVWF  36
02C2:  MOVLW  02
02C3:  MOVWF  37
02C4:  CALL   102
....................             printf(lcd_write_dat, "CLOF"); 
02C5:  MOVLW  69
02C6:  BSF    03.6
02C7:  MOVWF  0D
02C8:  MOVLW  00
02C9:  MOVWF  0F
02CA:  BCF    03.6
02CB:  CALL   195
....................           
....................          } 
02CC:  GOTO   304
....................           
....................          else if(temperatura_atual > (temperatura_desejada + histerese)){ 
02CD:  MOVF   32,W
02CE:  ADDWF  2E,W
02CF:  MOVWF  78
02D0:  MOVF   2F,W
02D1:  MOVWF  7A
02D2:  MOVF   33,W
02D3:  BTFSC  03.0
02D4:  INCFSZ 33,W
02D5:  ADDWF  7A,F
02D6:  MOVF   7A,W
02D7:  SUBWF  31,W
02D8:  BTFSS  03.0
02D9:  GOTO   304
02DA:  BTFSS  03.2
02DB:  GOTO   2E0
02DC:  MOVF   30,W
02DD:  SUBWF  78,W
02DE:  BTFSC  03.0
02DF:  GOTO   304
....................           
....................             output_low(HEATER); 
02E0:  BCF    2B.2
02E1:  MOVF   2B,W
02E2:  BSF    03.5
02E3:  MOVWF  07
02E4:  BCF    03.5
02E5:  BCF    07.2
....................             output_high(COOLER); 
02E6:  BCF    2B.1
02E7:  MOVF   2B,W
02E8:  BSF    03.5
02E9:  MOVWF  07
02EA:  BCF    03.5
02EB:  BSF    07.1
....................              
....................             lcd_gotoxy(7,2); 
02EC:  MOVLW  07
02ED:  MOVWF  36
02EE:  MOVLW  02
02EF:  MOVWF  37
02F0:  CALL   102
....................             printf(lcd_write_dat, "HTOF"); 
02F1:  MOVLW  6C
02F2:  BSF    03.6
02F3:  MOVWF  0D
02F4:  MOVLW  00
02F5:  MOVWF  0F
02F6:  BCF    03.6
02F7:  CALL   195
....................              
....................             lcd_gotoxy(13,2); 
02F8:  MOVLW  0D
02F9:  MOVWF  36
02FA:  MOVLW  02
02FB:  MOVWF  37
02FC:  CALL   102
....................             printf(lcd_write_dat, "CLON"); 
02FD:  MOVLW  6F
02FE:  BSF    03.6
02FF:  MOVWF  0D
0300:  MOVLW  00
0301:  MOVWF  0F
0302:  BCF    03.6
0303:  CALL   195
....................           
....................          } 
....................           
....................          if(!input(S2)){ 
0304:  BSF    03.5
0305:  BSF    06.1
0306:  BCF    03.5
0307:  BTFSC  06.1
0308:  GOTO   33A
....................        
....................             sistema = 0; 
0309:  BCF    2C.0
....................              
....................             output_low(HEATER); 
030A:  BCF    2B.2
030B:  MOVF   2B,W
030C:  BSF    03.5
030D:  MOVWF  07
030E:  BCF    03.5
030F:  BCF    07.2
....................             output_low(COOLER); 
0310:  BCF    2B.1
0311:  MOVF   2B,W
0312:  BSF    03.5
0313:  MOVWF  07
0314:  BCF    03.5
0315:  BCF    07.1
....................              
....................             lcd_gotoxy(1,2); 
0316:  MOVLW  01
0317:  MOVWF  36
0318:  MOVLW  02
0319:  MOVWF  37
031A:  CALL   102
....................             printf(lcd_write_dat, "SIOF"); 
031B:  MOVLW  72
031C:  BSF    03.6
031D:  MOVWF  0D
031E:  MOVLW  00
031F:  MOVWF  0F
0320:  BCF    03.6
0321:  CALL   195
....................              
....................             lcd_gotoxy(7,2); 
0322:  MOVLW  07
0323:  MOVWF  36
0324:  MOVLW  02
0325:  MOVWF  37
0326:  CALL   102
....................             printf(lcd_write_dat, "HTOF"); 
0327:  MOVLW  75
0328:  BSF    03.6
0329:  MOVWF  0D
032A:  MOVLW  00
032B:  MOVWF  0F
032C:  BCF    03.6
032D:  CALL   195
....................              
....................             lcd_gotoxy(13,2); 
032E:  MOVLW  0D
032F:  MOVWF  36
0330:  MOVLW  02
0331:  MOVWF  37
0332:  CALL   102
....................             printf(lcd_write_dat, "CLOF"); 
0333:  MOVLW  78
0334:  BSF    03.6
0335:  MOVWF  0D
0336:  MOVLW  00
0337:  MOVWF  0F
0338:  BCF    03.6
0339:  CALL   195
....................           
....................          } 
....................        
....................       } 
033A:  GOTO   25F
....................        
....................    } 
....................     
.................... } 
....................  
033B:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
